All element of the descriptors can be guarded by conditional expressions (if,else).
They are satisfied when the expression resolves to true.
They are included in the in-memory model when their condition is satisfied

------

1. Load distribution descriptor
2. Add *resolved* properties, template-models, template-sets and file-sets to the in-memory model
3. Repeat #2 for each resolved include (non conditionals and conditionals with expressions resolving to true)
4. Evaluate the input-flow
  4.1 If the property of an input-flow node is not set, resolve the value to set by prompting
  4.2 Evaluate the nested node(s) with the current value


TODO

 - think of features mapping of user-flow graph
   E.g. feature="true" as an attribute
 - think of integration and input (e.g. jersey needs to ask a question when security is enabled)
 - think of help-text and code snippets (e.g. flavor split screen)
 - think of adding rich help content (e.g. images)

-------

TODO

At archetype build time, we validate the decision tree:
 - Ensure that there are no cycle (direct acyclic graph)
 - Ensure that node ids are unique within their scope

----

The input controller maintains an in-memory of the graph and sets the values during prompting.
When the user navigates back to a previous step, the in-memory graph is kept as-is,
 if the user changes something we resume from the current scope ; this means potentially do new prompt

if we go back to a parent and we change a choice we clear all the children.
It's hierachy, clearly a node clears all the children.

-------

helidon feature add
helidon feature remove
helidon feature diff

-------

./etc/scripts/user-init
  setup ~/bin/helidon
  setup ~/.bashrc
  if .git does not exit, do git setup (git init + git commit)

-------

input -> engine(archetype) = project

-------

bare        |
quickstart  | - only one archetype now
database    |

artifactId is a preset

mvn -U archetype:generate -DinteractiveMode=false \
    -DarchetypeGroupId=io.helidon.archetypes \
    -DarchetypeArtifactId=helidon-quickstart-se \
    -DarchetypeVersion=2.1.0

helidon init --flavor se --base quickstart

helidon feature add digest-auth

helidon feature list

Traverse the graph under the "project scope".
Project scope is defined from the .helidon file that contains the input provided at generation time (i.e --flavor se --base hello-world)

security/authentication/basic-auth
security/authentication/digest-auth
security/authentication/google-login
security/authentication/header
security/authentication/http-sign
security/authentication/jwt
security/authentication/oidc
security/authorization/abac
security/authorization/abac/policy
security/authorization/abac/policy/el
security/authorization/abac/role
security/authorization/abac/scope
security/authorization/abac/time

    security/integration/grpc-client
    security/integration/grpc-server
    security/integration/jersey
    security/integration/jersey-client
    security/integration/webserver

security/outbound/basic-auth
security/outbound/google-login
security/outbound/header
security/outbound/http-sign
security/outbound/jwt
security/outbound/oidc
security/role-mapper/idcs
security/role-mapper/idcs-multitenant


--filter security/**

jersey
jersey/security
security/authentication/basic-auth

jersey
  |- security

security
  |- authentication
    |- providers
      |- basic-auth
      |- google-login
      |- digest-auth
      |- header
      |- http-sign
      |- jwt
      |- oidc

-------

/flavor/base/
/flavor/base/build-system

-------

Split descriptor into 2 schemas:
 1) one for development / maintainance (<archetype>)
 2) one for machine processing (generated from #1 at build-time) (<archetype-descriptor>)

Re-organized elements under <input /> and <output />
Only one input and one output per <archetype> file

Removed top level includes, gated by conditional property values
Instead scoped them under the input selection graph

Removed "property" attributes from input selection graph nodes, values of resolved graph can be looked using property syntax in conditionals.
E.g. ${flavor}

Select graph node ids are not unique globally and are scoped within their parent.
E.g.
 - flavor[se] -> base[bare|quickstart|database]
 - flavor[mp] -> base[bare|quickstart|database]


-------



config/encryption
config/etcd
config/git
config/hocon
config/object-mapping
config/yaml
grpc-client/metrics
grpc-server/metrics
health/built-ins
open-api
security/authentication/basic-auth
security/authentication/digest-auth
security/authentication/google-login
security/authentication/header
security/authentication/http-sign
security/authentication/jwt
security/authentication/oidc
security/authorization/abac
security/authorization/abac/policy
security/authorization/abac/policy/el
security/authorization/abac/role
security/authorization/abac/scope
security/authorization/abac/time
    security/integration/grpc-client
    security/integration/grpc-server
    security/integration/jersey
    security/integration/jersey-client
    security/integration/webserver
security/outbound/basic-auth
security/outbound/google-login
security/outbound/header
security/outbound/http-sign
security/outbound/jwt
security/outbound/oidc
security/role-mapper/idcs
security/role-mapper/idcs-multitenant
    tracing/integration/jersey
    tracing/integration/jersey-client
tracing/jaeger
tracing/zipkin



-------

zip file layout example for distribution (io.helidon.archetypes:helidon-catalog:jar)

|- distribution/
    |- distribution.xml
    |- mp.xml
    |- se.xml
|- common/
    |- global.xml
    |- personalize-project.xml
|- flavor/
   |- flavor.xml
   |- se/
       |- archetype-flow.xml
       |- base/
            |- archetype-flow.xml
            |- hello-world/
                |- files/
                |- archetype-flow.xml
            |- secure-hello-world/
                |- archetype-flow.xml
            |- quickstart/
                |- archetype-flow.xml
            |- database/
                |- helidon-database-se.xml
            |- bare/
                |- helidon-bare.xml
                |- output/
   |- mp/
       |- archetype-flow.xml
       |- base/
            |- archetype-flow.xml
            |- hello-world/
                |- archetype-flow.xml
            |- secure-hello-world/
                |- archetype-flow.xml
            |- quickstart/
                |- archetype-flow.xml
            |- database/
                |- archetype-flow.xml
            |- bare/
                |- archetype-flow.xml

io.helidon.archetypes:helidon-quickstart-se:jar
    |- (depends on) io.helidon.archetypes:helidon-catalog:jar

|- META-INF/archetype/post-generate.groovy
|- META-INF/archetype/context.xml (specifies the scope)

io.helidon.archetypes:helidon-quickstart-mp:jar
    |- (depends on) io.helidon.archetypes:helidon-catalog:jar

|- META-INF/archetype/post-generate.groovy
|- META-INF/archetype/context.xml (specifies the scope)


-------------

## Flow nodes

flow-step & flow-input are the flow node types that form the flow "graph".
They can be invoked in their file-system scope using `<invoke-flow src="path-to-xml">`

## Invoke-flow

`<invoke-flow>` effectively changes the current working directory to the directory that contains the invoked xml file.
All references are resolved relative to their own directory.

## Include

`<include>` is a directive that allows to re-use an XML file in a different working directory.
It includes all non flow-* elements in the current context.

## Choices tree

The choices tree represents the current choices made by the user.
It is maintained and evolves as the user makes choices.

E.g. Parts of the tree may be removed if a user changes a previous choice.

```
|- se
    |- bare
        |- media-support
            |- jackson
        |- security
            |- authentication
                |- providers
                    |- basic-auth
        |- jersey-support
```


## Choice

Choices can be used to pre-fill the choices tree before flow resolution.
When resolving flow, entries that exist in the choices tree will be skipped, those are immutable and hidden.

Choices can also be passed to the archetype engine "manually", e.g. batch cli, URI query param.

The example choices below are effectively "presets".

```
<choice flow="media-support/json/provider"> <!-- example of a single value choice -->
    <option value="jackson" />
</choice>
<choice flow="security/authentication/provider"> <!-- example of a multi-value choice (i.e a select with multiple values) -->
    <option value="basic-auth" />
    <option value="digest-auth" />
</choice>
<choice flow="health"> <!-- example of opting out of an option that defaults to true -->
    <option value="false" />
</choice>
<choice flow="project-name">my-super-project</choice> <!-- example of a text choice -->
```

### URI mapping

The example below maps the choices shown above into query params.

```
?media-support|json|provider=jackson&security|authentication|provider=basic-auth,digest-auth&health=false&project-name=my-super-project
```

## Optional steps

Optional steps must have inputs with defaults.
An optional step with non default inputs is invalid and should be validated at build-time as an error.

Customization steps are modeled as optional steps and declared as the last child of the step to be customized.
The order is the declaration order, the enclosing steps must declare the optional step used for customization carefully.

E.g.
se/se.xml invokes se/hello-world/hello-world-se.xml AND THEN invokes common/customize-project.xml.
se/hello-world/hello-world-se.xml invokes se/hello-world/customize-hello-world.xml as the very last step.
The declaration order for the two customization steps is first hello-world and then project.

When resolving flow nodes, we must recompute the optional next steps.

No action is required for optional steps other than continuing to the next step (unless this is the very last step).

## CONTINUE action

If the current step has any next step, a CONTINUE action is provided to navigate to the next step.
If the step is non optional and has non defaulted inputs, the CONTINUE action is disabled (greyed out), and enabled
  when the inputs have been filled.
If the current step is optional the CONTINUE action is available and can be used to skip.


-----------------


(2) Kubernetes
  |
  | [ ] Kubernetes support
  |   |- [ x ] add a service
  |   |- [ x ] add an Istio sidecar
  |
  |   [CONTINUE]
-----------------------------------------
(3) Media Support
  |
  | [ x ] Media type support
  |   |- [ x ] JSON (?)
  |        |- [ x ] Jackson
  |        |- [ x ] JSON-B
  |        |- [ x ] JSON-P
  |   |- [ x ] XML (?)
  |        |- [ x ] JAX-B
  |        |- [ x ] JAX-P
  |
  |   [CONTINUE]
-----------------------------------------
(4) Customize Project
  |
  |   Project name [ my-project ]
  |   Project groupId [ com.example ]
  |   Project artifactId [ my-project ]
  |   Project version [ 1.0-SNAPSHOT ]
  |   Java package [ com.example.myproject ]
  |
-----------------------------------------
[TRY IT!]

------

1) Write a "spec" for the archetype engine v2 (gist)
4) Help text
2) Simple UI mockup, to anticipate the data model needed for UI wizard based on vuetify
3) Model more "features" (fine grained such as config, health, metrics ; and set choices in all app bases)

- Maven archetype compatibility and the new magic (mapping of GAV to presets)
- Compat for engine v1 and v2 (new version of the cli generating projects for older versions of Helidon)
- model the .helidon file (model this with a mustache template in the archetype)
     - add user choices
     - helidon version
- Think about how to model multiple JVM language support
- Think about icons/logos for UI illustrations

--------------

By friday first draft of the spec.


