<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2023, 2024 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <variables>
        <boolean path="requires-io-helidon-security">true</boolean>
        <boolean path="requires-io-helidon-security-providers-oidc">true</boolean>
    </variables>
    <output>
        <model>
            <list key="providers-config-entries">
                <value><![CDATA[
  - oidc:
      client-id: "your-client-id"
      client-secret: "changeit"
      identity-uri: "https://your-tenant-id.identity.oracle.com"
      # A prefix used for custom scopes
      scope-audience: "http://localhost:7987/test-application"
      proxy-host: ""
      # Used as a base for redirects back to us (based on Host header now, so no need to explicitly define it)
      # If explicitly defined, will override host header
      # frontend-uri: "http://localhost:7987"
      # support for non-public signature JWK (and maybe other IDCS specific handling)
      server-type: "idcs"
      logout-enabled: true
      # Can define just a path, host will be taken from header
      post-logout-uri: "/loggedout"
      # We want to redirect to login page (and token can be received either through cookie or header)
      redirect: true
  - idcs-role-mapper:
      multitenant: false
      oidc-config:
        # we must repeat IDCS configuration, as in this case
        # IDCS serves both as open ID connect authenticator and
        # as a role mapper. Using minimal configuration here
        client-id: "your-client-id"
        client-secret: "changeit"
        identity-uri: "https://your-tenant-id.identity.oracle.com"]]>
                </value>
            </list>
            <list key="paths-config-entries">
                <value><![CDATA[   - path: "/rest/profile"
             methods: ["get"]
             authenticate: true
             roles-allowed: ["my_admins"]]]>
                </value>
            </list>
            <list key="dependencies">
                <map>
                    <value key="groupId">io.helidon.security.providers</value>
                    <value key="artifactId">helidon-security-providers-oidc</value>
                </map>
                <map>
                    <value key="groupId">io.helidon.security.providers</value>
                    <value key="artifactId">helidon-security-providers-idcs-mapper</value>
                </map>
            </list>
            <list key="Main-java-imports">
                <value>java.util.Optional</value>
            </list>
            <list key="Main-helidon-imports">
                <value>io.helidon.common.context.Contexts</value>
                <value>io.helidon.http.HttpMediaTypes</value>
                <value>io.helidon.security.Security</value>
                <value>io.helidon.security.SecurityContext</value>
                <value>io.helidon.security.Subject</value>
                <value>io.helidon.security.providers.oidc.OidcFeature</value>
            </list>
            <list key="Main-main">
                <value><![CDATA[
        Security security = Security.create(config.get("security"));
        // this is needed for proper encryption/decryption of cookies
        Contexts.globalContext().register(security);]]>
                </value>
            </list>
            <list key="Main-routing">
                <value><![CDATA[
        if (Config.global().get("security.enabled").asBoolean().orElse(true)) {
            // IDCS requires a web resource for redirects
            routing.addFeature(OidcFeature.create(Config.global()));
        }]]>
                </value>
            </list>
            <list key="Main-routing-builder">
                <value><![CDATA[
            // web server does not (yet) have possibility to configure routes in config files, so explicit...
            .get("/rest/profile", (req, res) -> {
                Optional<SecurityContext> securityContext = req.context().get(SecurityContext.class);
                res.headers().contentType(HttpMediaTypes.PLAINTEXT_UTF_8);
                res.send("Response from config based service, you are: \n" + securityContext
                    .flatMap(SecurityContext::user)
                    .map(Subject::toString)
                    .orElse("Security context is null"));
            })
            .get("/loggedout", (req, res) -> res.send("You have been logged out"))]]>
                </value>
            </list>
            <list key="readme-sections">
                <value><![CDATA[
## Security integration with IDCS

This example demonstrates integration with IDCS (Oracle identity service, integrated with Open ID Connect provider).

### Code Configuration

Edit application.yaml for IdcsMain.java or OidcConfig variable definition for IdcsBuilderMain.java sample

 1. idcs-uri  : Base URL of your idcs instance, usually something like https://idcs-<longnumber>.identity.oraclecloud.com
 2. idcs-client-id  : This is obtained from your IDCS application in the IDCS console
 3. idcs-client-secret   : This is obtained from your IDCS application in the IDCS console
 4. frontend-uri : This is the base URL of your application when run, e.g. `http://localhost:7987`
 5. proxy-host   : Your proxy server if needed
 6. scope-audience : This is the scope audience which MUST match the primary audience in the IDCS resource, recommendation is not to have a trailing slash (/)

## Try the application

Build and run the application and then try the endpoints:

1. Open http://localhost:7987/rest/profile in your browser. This should present
 you with a response highlighting your logged in role (null) correctly as you are not logged in
2. Open `http://localhost:7987/oidc/logout` in your browser. This will log you out from your IDCS and Helidon sessions]]>
                </value>
            </list>
        </model>
    </output>

</archetype-script>
