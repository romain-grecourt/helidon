<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2024 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <output>
        <files>
            <directory>files</directory>
            <includes>
                <include>src/*/resources/**/static.js/google-app.js</include>
            </includes>
        </files>
        <file source="files/src/main/resources/WEB/google-login.html" target="src/main/resources/WEB/google-login.html"/>
        <model>
            <list key="paths-config-entries">
                <value><![CDATA[    - path: "/rest/profile"
      methods: ["get"]
      authenticate: true]]>
                </value>
            </list>
            <list key="dependencies">
                <map>
                    <value key="groupId">io.helidon.security.providers</value>
                    <value key="artifactId">helidon-security-providers-google-login</value>
                </map>
                <map>
                    <value key="groupId">io.helidon.bundles</value>
                    <value key="artifactId">helidon-bundles-config</value>
                </map>
                <map>
                    <value key="groupId">io.helidon.webserver</value>
                    <value key="artifactId">helidon-webserver-static-content</value>
                </map>
            </list>
            <list key="Main-helidon-imports">
                <value>java.util.Optional</value>
            </list>
            <list key="Main-helidon-imports">
                <value>io.helidon.http.HttpMediaTypes</value>
                <value>io.helidon.security.Security</value>
                <value>io.helidon.security.SecurityContext</value>
                <value>io.helidon.security.Subject</value>
                <value>io.helidon.security.providers.google.login.GoogleTokenProvider</value>
                <value>io.helidon.webserver.WebServer</value>
                <value>io.helidon.webserver.WebServerConfig</value>
                <value>io.helidon.webserver.context.ContextFeature</value>
                <value>io.helidon.webserver.security.SecurityFeature</value>
                <value>io.helidon.webserver.staticcontent.StaticContentService</value>
            </list>
            <list key="Main-main">
                <value><![CDATA[
        Security security = Security.builder()
                .addProvider(GoogleTokenProvider.builder()
                        .clientId("your-client-id.apps.googleusercontent.com"))
                .build();
]]>
                </value>
            </list>
            <list key="Main-server-builder">
                <value><![CDATA[.featuresDiscoverServices(false)
                .addFeature(ContextFeature.create())
                .addFeature(SecurityFeature.builder()
                                    .security(security)
                                    .build())
]]>
                </value>
            </list>
            <list key="Main-routing-builder">
                <value><![CDATA[.get("/rest/profile", SecurityFeature.authenticate(),
                 (req, res) -> {
                        Optional<SecurityContext> securityContext = req.context().get(SecurityContext.class);
                        res.headers().contentType(HttpMediaTypes.PLAINTEXT_UTF_8);
                        res.send("Response from builder based service, you are: \n" + securityContext
                                .flatMap(SecurityContext::user)
                                .map(Subject::toString)
                                .orElse("Security context is null"));
                        res.next();
                    })
            .register(StaticContentService.create("/WEB"))
]]>
                </value>
            </list>
            <list key="Main-logging">
                <value><![CDATA[
            System.out.println("Check Google login http://localhost:" + server.port() + "/google-login.html");]]>
                </value>
            </list>
            <list key="security-properties">
                <value><![CDATA[    google-client-id: "your-app-id.apps.googleusercontent.com"
    proxy-host: ""]]>
                </value>
            </list>
            <list key="providers-config-entries">
                <value><![CDATA[    - google-login:
        # Create your own application in Google developer console
        # Also update the client id configured in header of index.html
        # Detailed how-to for login button (including links how to create an application):
        # https://developers.google.com/identity/sign-in/web/sign-in
        client-id: "your-app-id.apps.googleusercontent.com"
        # Defaults for Helidon
        # realm: "helidon"
        # Configure proxy host if needed
        proxy-host: ""
        # proxy-port: 80

        # This is the default for GoogleTokenProvider
        #token:
        #  header: "Authorization"
        # or do not specify - then the whole header is considered to be the token value
        #  prefix: "bearer "
        # optional alternative - looking for first matching group
        #  regexp: "bearer (.*)"
        #}]]>
                </value>
            </list>
            <list key="readme-sections" >
                <value><![CDATA[
## Try Google login

There is a static web page in src/main/resources/WEB with a page to login to Google.

This example requires a Google client id to run.
Update the following files with your client id (it should support http://localhost:8080):
1. src/main/resources/application.yaml - set security.properties.google-client-id or override it in a file in ~/helidon/examples.yaml
2. src/main/resources/WEB/index.html - update the meta tag in header with name "google-signin-client_id"
3. src/main/java/io/helidon/security/examples/google/GoogleMain.java - update the client id in builder of provider
]]>
                </value>
            </list>
            <map key="module-requires">
                <value key="io.helidon.webserver.context">true</value>
                <value key="io.helidon.webserver.staticcontent">true</value>
                <value key="io.helidon.security.providers.google.login">true</value>
            </map>
        </model>
    </output>
</archetype-script>
